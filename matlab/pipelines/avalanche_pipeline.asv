

function flag = avalanche_pipeline(ImgF, subject_json, params)


if params.run

    %load mask and get network
    [mask, validPixels] = load_standard_mask(params.parameters);
    [adjmat,network] = distance_network(128,validPixels, params.parameters);

    
        %downsample the FOV
        ImgF = spatialBlockDownsample(ImgF, params.down_sample);
        ImgF = zscore_independent(ImgF);

        %filter good frames and get badframes
        goodFrames = [goodFrames(cellfun(@length, goodFrames) > params.good_frames_thresh)];
        badFrames = setdiff(1:size(ImgF,3), [goodFrames{:}]);

        %set badframes to zero
        ImgF(:,:,badFrames) = 0;

        %reshape ImgF;
        ImgF = reshape(ImgF, size(ImgF,1)*size(ImgF,2), size(ImgF,3));

        %keep only valid pixels
        ImgF = ImgF(validPixels,:);

        %get avalanches
        for th = 1:length(params.thresh_list)
            thresh = params.thresh_list(th);

            step = ['avs_thresh_' num2str(thresh)];
            type = 'avalanches';
            stepparams = struct(step = step, ...
                type = type, ...
                threshold = thresh, ...
                hkradius = params.hkradius, ...
                downsample = params.down_sample, ...
                good_frames_threshold = params.good_frames_thresh, ...
                warp = params.warp);

            avstats = segmented_avalanche_analysis(ImgF, validPixels, adjmat, network, stepparams);
            subject_json = update_subject_json(subject_json, true, stepparams);
            subject_json = save_avalanche_derivative(subject_json,avstats, stepparams);

            save_json(subject_json)
            'saved!'
            clear stepparams
        end
        clear ImgF

        %save progress
        progress.iexp = i;
        progress.total = length(subject_subject_jsons);
        progress.time = datestr(now, 'yyyy-mm-ddTHH:MM:SS');
        save([params.project 'progress'], 'progress');
    %end
    flag = "finished!";
else
    flag = "project run is off";
end
%%
end

